/*
	Jest Language

	Here's what I'm aiming for in this language:
*/

//void type
void v0;

//signed and unsigned 8, 16, 32 and 64 bit 
s8 v1;
u8 v2;
s16 v3;
u16 v4;
s32 v5;
u32 v6;
s64 v7;
u64 v8;

//floating point
f32 v9;
f64 v10;

//pointer types
s8 *v11;
void *v00;

/* 
	basic types introspection:
		._min - minimum value
		._max - maximum value
		._init - default value
		._epsilon - only floating-point types
		._name - a string with the type's name
		._size - size in bytes (0 for void, 4 or 8 for pointer types)

	variable/statement level introspection:
		._name - a string with the name of the variable or the complete statement
		._type - the type of the var. or return of the statement
*/

//structures
struct Vec2
{
	f32 x, y;
}

struct Vec3
{
	use Vec2;
	f32 z;
}

/*
	structures introspection:
		._member_count - number of members (u32)
		._member[] - an array of the members themselves
		._size - the size in bytes

	also, each member of a struct contains:
		._offset - the offset of the member (u32)
*/

//enums

enum NamedEnum : u8
{
	VALUE1,
	VALUE2,
}

//"constants"
enum VALUE3 = 5;
enum VALUE4 : f32 = 6;

//aliases
alias byte = u8;
alias vector3 = Vec3;
//TODO: should alias only accept things that are valid in its scope,
//or should it work more like a #define?

void main()
{
	Vec3 v3;
	v3.x = 10;

	assert( u8._size==1 );
	assert( s32._size==4 );

	printf( "s32 min/max values are (%/%)\n", s32._min, s32._max );
	printf( "f64 epsilon is %\n", f64._epsilon );	

	s8 w;
	printf( "%'s type name is %s\n", w._name, w._type._name );
	//output: w's type name is s8

	//create a var. with the same type as w's
	w._type w2;
		
	assert( Vec2._member_count==2 );
	assert( Vec3._member_count==3 );
	assert( Vec3.z._offset==8 );

	printf( "Listing Vec3's members:\n" );
	for( int i=0; i<Vec3._member_count; i++ )
	{
		printf( "\tmember(%) name(%) offset(%) type_name(%)\n", i, Vec3._member[i]._name, Vec3._member[i]._offset, Vec3._member[i]._type._name );
	}

	//binary, octal and hexadecimal notations
	u8 i1 = 0b10101010;
	u8 i2 = 0xFF; //or 0hFF
	u8 i3 = 0o377;	

	//nested functions
	s32 Foo( s32 param )
	{
		s32 result = param*i2;
		return result;
	}

	//...and nested blocks, with their own scoped things
	{
		struct ScopedStruct
		{
			u32 value1, value2;
		}
		ScopedStruct data;
	}

	//heap allocator, deallocator and defer
	u8 *pixels = new(256*256);
	defer delete(pixels);
	for( int i=0; i<256*256; ++i )
		pixels[i] = i%255;
}

//EOF